import sys
sys.stdin = open('6275_input.txt')

# 격자판 한 칸 정사각형, 로봇 한 칸 차지
# 동, 서, 남, 북 중 한 방향 바라볼 수 있음
    # L: 왼쪽으로 90도 회전, 바라보는 방향이 바뀜
    # R: 오른쪽으로 90도 회전하며, 바라보는 방향이 바뀜
    # A: 바라보는 방향으로 두 칸 전진. 단, 이 과정에서 로봇이 격자판 바깥을 나간다면 로봇은 이 명령을 수행할 수 없다.
# 같은 칸을 두 번 이상 방문 X
# 방문한 모든 칸 지도에 표시
# 사수는 한 번 이상의 A 명령을 내렸기 때문에 로봇 방문 칸 수 최소 3개 이상임
# 목표 달성 방안 여러개 일 수 있어서 아무것이나 출력해도 답 됨


T = int(input())
for tc in range(1, T+1):
    # 격자판 세로 크기: H, 가로 크기: W
    H, W = map(int, input().split())
    # 방문하면 #, 방문 안하면 .
    Map = [list(map(str, input().split())) for _ in range(H)]

    # BFS 사용해서 한 지점에서 갈 수 있는 곳들 저장하고,
    # 거기로 갔을때가 최소인지를 파악
    # 첫 지점을 찾으려면 뒤에서부터 시작해야 함
    # #을 만나면 일단 BFS 돌려보고 아니면 거기서 break 시키고
    # 다른 # 찾아서 다시 시작함

    # 출력 1: 로봇의 처음 위치(a: 행, b: 열)
    # 출력 2: 처음 바라보는 방향: >는 동쪽, <는 서쪽, v는 남쪽, ^는 북쪽
    # 출력 3: 명령어들 출력 -> 개수 최소화