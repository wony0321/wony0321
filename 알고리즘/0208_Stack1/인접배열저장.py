'''
7 8
1 2 1 3 2 4 2 5 4 6 5 6 6 7 3 7
'''

# 주로 인풋은 간선(E) 정보와 정점(V) 정보를 같이 줌
# 인접 배열을 저장할 때는 간선의 정보를 이용해서 저장하면 됨
# 인접 배열을 초기화할 때는 정점 정보를 이용하면 됨
# 간선은 시작점과 도착점이 묶여 있는 것

# V: 정점의 개수, E: 간선의 개수
V, E = 7, 8
edge_list = list(map(int, input().split()))

# 정점의 개수만큼 2차원 리스트로 만들면 됨
# 0은 연결되어 있지 않음을 의미
# 정점의 번호를 그대로 사용하기 위해 +1 해줌 (정점이 7이니까 8*8로 해야함)
adj_arr = [[0] * (V+1) for _ in range(V+1)]

for idx in range(E):
    # 시작점(idx*2), 도착점(idx*2+1)
    start = edge_list[idx*2]
    end = edge_list[idx*2+1]
    # 인접 배열에 저장
    adj_arr[start][end] = 1
    # 주어지는 방향이 단방향인지, 양방향인지 체크해주어야 함
    # 단방향이라면 한 방향으로만 가기 때문에 위의 start -> end만 해도 ok

    # 만약 양방향으로 저장해야 한다면 아래와 같이 반대도 1로 설정
    # adj_arr[end][start] = 1

for i in range(V):
    print(*adj_arr[i])

'''
0 0 0 0 0 0 0 0 이동X
0 0 1 1 0 0 0 0 2->3 으로 이동
0 0 0 0 1 1 0 0 4->5 로 이동
0 0 0 0 0 0 0 1 7로 이동
0 0 0 0 0 0 1 0 6으로 이동
0 0 0 0 0 0 1 0 6으로 이동
0 0 0 0 0 0 0 1 7로 이동
'''